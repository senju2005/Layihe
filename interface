import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

@pytest.fixture(scope="module")
def driver():
    service = Service("chromedriver.exe")
    options = Options()
    options.add_argument("--headless")  # Run headlessly for CI/CD or background testing
    driver = webdriver.Chrome(service=service, options=options)
    driver.maximize_window()
    yield driver
    driver.quit()

@pytest.fixture(scope="module")
def wait(driver):
    return WebDriverWait(driver, 10)

def test_logo_size(driver, wait):
    driver.get("https://en.wikipedia.org/wiki/NASA")
    eleLogo = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'a.mw-wiki-logo')))
    
    # Adding tolerance for the pixel values since they may vary slightly
    expected_width = 160
    expected_height = 160
    assert abs(eleLogo.size['width'] - expected_width) < 5  # Tolerance of 5 pixels
    assert abs(eleLogo.size['height'] - expected_height) < 5  # Tolerance of 5 pixels

def test_featured_color(driver, wait):
    eleFeaturedDiv = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'div.central-featured')))
    
    # Background color might include extra spaces or a slight difference in the exact format
    expected_color = "rgba(0, 0, 0, 1)"
    actual_color = eleFeaturedDiv.value_of_css_property("background-color")
    
    assert actual_color.strip() == expected_color, f"Expected {expected_color}, but got {actual_color}"

def test_table(driver, wait):
    eleTable = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'table.infobox.vcard')))
    
    # `box-sizing` might have different representations, so ensure a match
    expected_box_sizing = "border-box"
    actual_box_sizing = eleTable.value_of_css_property("box-sizing")
    
    assert actual_box_sizing.strip() == expected_box_sizing, f"Expected {expected_box_sizing}, but got {actual_box_sizing}"

def test_font(driver, wait):
    eleFont = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'cite.citation.web.cs1')))
    
    # Verify font-family and font-size, add trimming if there's potential extra space
    expected_font_family = "sans-serif"
    actual_font_family = eleFont.value_of_css_property("font-family").strip()
    
    expected_font_size = "12.6px"
    actual_font_size = eleFont.value_of_css_property("font-size").strip()
    
    assert actual_font_family == expected_font_family, f"Expected {expected_font_family}, but got {actual_font_family}"
    assert actual_font_size == expected_font_size, f"Expected {expected_font_size}, but got {actual_font_size}"
